security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: bcrypt
#*****************************************************
#    providers:
#        users_in_memory: { memory: null }
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            lazy: true
#            provider: users_in_memory
#*****************************************************
    providers:
        users:
            entity:
                # the class of the entity that represents users
                class: 'App\Entity\User'
                # the property to query by - e.g. email, username, etc
                property: 'Email'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy

            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            logout:
                path:   /start/logout
                target: /
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: /start, roles: PUBLIC_ACCESS }
         - { path: /logout, roles: PUBLIC_ACCESS }
         - { path: /inter, roles: ROLE_ADMIN }
         - { path: /ope, roles: [ROLE_ADMIN, ROLE_OPERATEUR] }
        # - { path: /ope, roles: ROLE_OPERATEUR }
         - { path: /client, roles: [ROLE_ADMIN, ROLE_CLIENT] }
        # - { path: /client, roles: ROLE_CLIENT }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        # MANAGER hérite du rôle USER
        # => si on souhaite que les managers et admins postent des critiques en leur nom
        # ROLE_MANAGER: ROLE_USER
        # ADMIN hérite du rôle MANAGER
        ROLE_ADMIN: ROLE_ADMIN
        ROLE_OPERATEUR: ROLE_OPERATEUR
        ROLE_CLIENT: ROLE_CLIENT
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon